
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800112  00800112  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f8  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c3  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000383  00000000  00000000  0000126b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cb  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019e  00000000  00000000  00001a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  9e:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	0x86, // E
	0x8E  // F
};

void initADC() {
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX2) | (1 << MUX1); // AVCC, justificado a la izquierda, ADC6
  a6:	86 e6       	ldi	r24, 0x66	; 102
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIE); // habilitar, prescaler 128, interrupción
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	8f e8       	ldi	r24, 0x8F	; 143
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // comenzar primera conversión
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <initTimers>:
}

void initTimers() {
	// Timer0 para botones (~10ms)
	TCCR0A = 0;
  bc:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS02) | (1 << CS00);
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	// Timer2 para multiplexado rápido
	TCCR2A = 0;
  c8:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS21); // prescaler 8
  cc:	92 e0       	ldi	r25, 0x02	; 2
  ce:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = (1 << TOIE2);
  d2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
  d6:	08 95       	ret

000000d8 <setup>:
}

void setup() {
	// PORTD: segmentos
	DDRD = 0xFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
  dc:	8b b9       	out	0x0b, r24	; 11

	// PORTC: contador (salida)
	DDRC = 0xFF;
  de:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
  e0:	18 b8       	out	0x08, r1	; 8

	// PB0 y PB1 como entradas (botones)
	DDRB &= ~((1 << PB0) | (1 << PB1));
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	8c 7f       	andi	r24, 0xFC	; 252
  e6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB0) | (1 << PB1); // pull-up
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	85 b9       	out	0x05, r24	; 5

	// PB2 y PB3: transistores displays
	DDRB |= (1 << PB2) | (1 << PB3);
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	8c 60       	ori	r24, 0x0C	; 12
  f2:	84 b9       	out	0x04, r24	; 4

	// PB5: LED de alarma
	DDRB |= (1 << PB5);
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PB5);
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	8f 7d       	andi	r24, 0xDF	; 223
  fe:	85 b9       	out	0x05, r24	; 5

	initADC();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	initTimers();
 104:	0e 94 5e 00 	call	0xbc	; 0xbc <initTimers>
	sei();
 108:	78 94       	sei
 10a:	08 95       	ret

0000010c <main>:
}

int main(void) {
	setup();
 10c:	0e 94 6c 00 	call	0xd8	; 0xd8 <setup>
	while (1) {
		// Mostrar contador
		PORTC = counter;
 110:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <counter>
 114:	88 b9       	out	0x08, r24	; 8

		// Alarma
		if (adc_value > counter) {
 116:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <adc_value>
 11a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <counter>
 11e:	89 17       	cp	r24, r25
 120:	20 f4       	brcc	.+8      	; 0x12a <main+0x1e>
			PORTB |= (1 << PB5); // Encender alarma
 122:	85 b1       	in	r24, 0x05	; 5
 124:	80 62       	ori	r24, 0x20	; 32
 126:	85 b9       	out	0x05, r24	; 5
 128:	f3 cf       	rjmp	.-26     	; 0x110 <main+0x4>
			} else {
			PORTB &= ~(1 << PB5); // Apagar alarma
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8f 7d       	andi	r24, 0xDF	; 223
 12e:	85 b9       	out	0x05, r24	; 5
 130:	ef cf       	rjmp	.-34     	; 0x110 <main+0x4>

00000132 <__vector_9>:
		}
	}
}

// Timer2 - multiplexado displays
ISR(TIMER2_OVF_vect) {
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
	// Apagar ambos displays
	PORTB &= ~((1 << PB2) | (1 << PB3));
 144:	85 b1       	in	r24, 0x05	; 5
 146:	83 7f       	andi	r24, 0xF3	; 243
 148:	85 b9       	out	0x05, r24	; 5

	uint8_t low = adc_value & 0x0F;
 14a:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <adc_value>
 14e:	8e 2f       	mov	r24, r30
 150:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t high = (adc_value >> 4) & 0x0F;
 152:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <adc_value>
 156:	e2 95       	swap	r30
 158:	ef 70       	andi	r30, 0x0F	; 15

	if (mux_state == 0) {
 15a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
 15e:	91 11       	cpse	r25, r1
 160:	0a c0       	rjmp	.+20     	; 0x176 <__vector_9+0x44>
		PORTD = tabla_7seg[low];
 162:	e8 2f       	mov	r30, r24
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	ee 5f       	subi	r30, 0xFE	; 254
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	80 81       	ld	r24, Z
 16c:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PB2);
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	84 60       	ori	r24, 0x04	; 4
 172:	85 b9       	out	0x05, r24	; 5
 174:	08 c0       	rjmp	.+16     	; 0x186 <__vector_9+0x54>
		} else {
		PORTD = tabla_7seg[high];
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ee 5f       	subi	r30, 0xFE	; 254
 17a:	fe 4f       	sbci	r31, 0xFE	; 254
 17c:	80 81       	ld	r24, Z
 17e:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PB3);
 180:	85 b1       	in	r24, 0x05	; 5
 182:	88 60       	ori	r24, 0x08	; 8
 184:	85 b9       	out	0x05, r24	; 5
	}
	mux_state ^= 1;
 186:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	89 27       	eor	r24, r25
 18e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__vector_16>:

// Timer0 - botones
ISR(TIMER0_OVF_vect) {
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
	static uint8_t prevB0 = 1;
	static uint8_t prevB1 = 1;

	uint8_t nowB0 = PINB & (1 << PB0);
 1b4:	93 b1       	in	r25, 0x03	; 3
	uint8_t nowB1 = PINB & (1 << PB1);
 1b6:	83 b1       	in	r24, 0x03	; 3
 1b8:	82 70       	andi	r24, 0x02	; 2

	if (!nowB0 && prevB0) {
 1ba:	29 2f       	mov	r18, r25
 1bc:	21 70       	andi	r18, 0x01	; 1
 1be:	90 fd       	sbrc	r25, 0
 1c0:	0d c0       	rjmp	.+26     	; 0x1dc <__vector_16+0x38>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <prevB0.1754>
 1c6:	99 23       	and	r25, r25
 1c8:	49 f0       	breq	.+18     	; 0x1dc <__vector_16+0x38>
		if (counter > 0) counter--;
 1ca:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <counter>
 1ce:	99 23       	and	r25, r25
 1d0:	29 f0       	breq	.+10     	; 0x1dc <__vector_16+0x38>
 1d2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <counter>
 1d6:	91 50       	subi	r25, 0x01	; 1
 1d8:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <counter>
	}
	if (!nowB1 && prevB1) {
 1dc:	81 11       	cpse	r24, r1
 1de:	0d c0       	rjmp	.+26     	; 0x1fa <__vector_16+0x56>
 1e0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e4:	99 23       	and	r25, r25
 1e6:	49 f0       	breq	.+18     	; 0x1fa <__vector_16+0x56>
		if (counter < 255) counter++;
 1e8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <counter>
 1ec:	9f 3f       	cpi	r25, 0xFF	; 255
 1ee:	29 f0       	breq	.+10     	; 0x1fa <__vector_16+0x56>
 1f0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <counter>
 1f4:	9f 5f       	subi	r25, 0xFF	; 255
 1f6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <counter>
	}
	prevB0 = nowB0;
 1fa:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <prevB0.1754>
	prevB1 = nowB1;
 1fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <__vector_21>:

// ADC - lectura de potenciómetro
ISR(ADC_vect) {
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	8f 93       	push	r24
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	adc_value = ADCH;
 222:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 226:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <adc_value>
	ADCSRA |= (1 << ADSC); // iniciar nueva conversión
 22a:	ea e7       	ldi	r30, 0x7A	; 122
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 64       	ori	r24, 0x40	; 64
 232:	80 83       	st	Z, r24
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	8f 91       	pop	r24
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
