
Labortario_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000058e  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000624  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae0  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000890  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060e  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b1  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014a  00000000  00000000  00002679  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000027c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 c5 02 	jmp	0x58a	; 0x58a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
		_delay_ms(10);
    }
}

void ADC_init(){
	ADMUX |= (1 << REFS0);		//voltaje de referencia
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //PRESCALER 128 (125kHz)
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);		//habilita el adc
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel){
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07); //selecciona el canal
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	87 70       	andi	r24, 0x07	; 7
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	//inicia la conversion
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); //espera hasta que termine
  da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	86 fd       	sbrc	r24, 6
  e0:	fc cf       	rjmp	.-8      	; 0xda <ADC_Read+0x18>
	return ADC;		//refresca el valor de 10 bits
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  ea:	08 95       	ret

000000ec <main>:
void ADC_init();
uint16_t ADC_Read(uint8_t channel);

int main(void)
{
	ADC_init();
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
    PMW1_init();
  f0:	0e 94 df 00 	call	0x1be	; 0x1be <PMW1_init>
	PMW2_init();
  f4:	0e 94 c6 00 	call	0x18c	; 0x18c <PMW2_init>
	PMW_LED_init();
  f8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <PMW_LED_init>
	
    while (1) 
    {
		uint16_t adc_value = ADC_Read(0); //lee el potenciometro (PC0)
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
		uint16_t pmw_value1 = (3600.0/1023.0)*adc_value + 1200; //mapea
 102:	bc 01       	movw	r22, r24
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 ca 01 	call	0x394	; 0x394 <__floatunsisf>
 10c:	2e e4       	ldi	r18, 0x4E	; 78
 10e:	38 e3       	ldi	r19, 0x38	; 56
 110:	41 e6       	ldi	r20, 0x61	; 97
 112:	50 e4       	ldi	r21, 0x40	; 64
 114:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__mulsf3>
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	46 e9       	ldi	r20, 0x96	; 150
 11e:	54 e4       	ldi	r21, 0x44	; 68
 120:	0e 94 2f 01 	call	0x25e	; 0x25e <__addsf3>
 124:	0e 94 9b 01 	call	0x336	; 0x336 <__fixunssfsi>
		PMW1_SetDutyCycle(pmw_value1); //ajusta el servo
 128:	cb 01       	movw	r24, r22
 12a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PMW1_SetDutyCycle>
		
		uint16_t adc_value2 = ADC_Read(1); //lee el potenciometro (PC1)
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
		int16_t pmw_value2 = (uint8_t)((45.0/1023.0)*adc_value2)+5;
 134:	bc 01       	movw	r22, r24
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 ca 01 	call	0x394	; 0x394 <__floatunsisf>
 13e:	2b e0       	ldi	r18, 0x0B	; 11
 140:	3d e2       	ldi	r19, 0x2D	; 45
 142:	44 e3       	ldi	r20, 0x34	; 52
 144:	5d e3       	ldi	r21, 0x3D	; 61
 146:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__mulsf3>
 14a:	0e 94 9b 01 	call	0x336	; 0x336 <__fixunssfsi>
 14e:	86 2f       	mov	r24, r22
 150:	90 e0       	ldi	r25, 0x00	; 0
		PMW2_SetDutyCycle(pmw_value2); //ajusta el servo
 152:	05 96       	adiw	r24, 0x05	; 5
 154:	0e 94 d6 00 	call	0x1ac	; 0x1ac <PMW2_SetDutyCycle>
		
		uint16_t adc_value3 = ADC_Read(2);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
		uint8_t brillo = (uint8_t)((63.0/1023.0)*adc_value3);
 15e:	bc 01       	movw	r22, r24
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 ca 01 	call	0x394	; 0x394 <__floatunsisf>
 168:	20 e1       	ldi	r18, 0x10	; 16
 16a:	3f e3       	ldi	r19, 0x3F	; 63
 16c:	4c e7       	ldi	r20, 0x7C	; 124
 16e:	5d e3       	ldi	r21, 0x3D	; 61
 170:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__mulsf3>
 174:	0e 94 9b 01 	call	0x336	; 0x336 <__fixunssfsi>
 178:	86 2f       	mov	r24, r22
		PMW_LED_BRILLO(brillo);
 17a:	0e 94 05 01 	call	0x20a	; 0x20a <PMW_LED_BRILLO>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9c e9       	ldi	r25, 0x9C	; 156
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x96>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x9c>
 188:	00 00       	nop
 18a:	b8 cf       	rjmp	.-144    	; 0xfc <main+0x10>

0000018c <PMW2_init>:
 */ 

#include "PMW2.h"

void PMW2_init(){
	DDRD |= (1 << DDD3); //pd3 como salida para oc2b 
 18c:	8a b1       	in	r24, 0x0a	; 10
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	8a b9       	out	0x0a, r24	; 10
	
	//configuramos timer2 modo fast 3 
	TCCR2A = 0;
 192:	e0 eb       	ldi	r30, 0xB0	; 176
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	10 82       	st	Z, r1
	TCCR2A |= (1 << COM2B1) | (1 << WGM21) | (1 << WGM20); //modo 3 011
 198:	80 81       	ld	r24, Z
 19a:	83 62       	ori	r24, 0x23	; 35
 19c:	80 83       	st	Z, r24
	TCCR2B = 0;
 19e:	e1 eb       	ldi	r30, 0xB1	; 177
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	10 82       	st	Z, r1
	TCCR2B |= (1 << CS22) | (1 << CS21)| (1 << CS20);  //prescaler 1024 periodo 16.38ms 
 1a4:	80 81       	ld	r24, Z
 1a6:	87 60       	ori	r24, 0x07	; 7
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <PMW2_SetDutyCycle>:
	//ICR1 = 39999; //TOP = 39999 frecuencia 50Hz (20ms)
}

void PMW2_SetDutyCycle(uint16_t duty){
	//limitamos el valor a 255 (8 bits)
	if(duty > 255) duty = 255;
 1ac:	8f 3f       	cpi	r24, 0xFF	; 255
 1ae:	91 05       	cpc	r25, r1
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <PMW2_SetDutyCycle+0xc>
 1b2:	10 f0       	brcs	.+4      	; 0x1b8 <PMW2_SetDutyCycle+0xc>
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	90 e0       	ldi	r25, 0x00	; 0
	OCR2B = duty; //valor del pulso 
 1b8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 1bc:	08 95       	ret

000001be <PMW1_init>:
 *  Author: andre
 */ 
#include "PWM1.h"

void PMW1_init(){
	DDRB |= (1 << DDB1); //pb1 como salida (OC1A)
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	84 b9       	out	0x04, r24	; 4
	
	//configuramos timer1 en modo Fast PMW con ICR1 como TOP (modo 14)
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); //pmw no invertido
 1c4:	e0 e8       	ldi	r30, 0x80	; 128
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	82 68       	ori	r24, 0x82	; 130
 1cc:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);  //prescaler 8 modo 14
 1ce:	e1 e8       	ldi	r30, 0x81	; 129
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	8a 61       	ori	r24, 0x1A	; 26
 1d6:	80 83       	st	Z, r24
	
	ICR1 = 39999; //TOP = 39999 frecuencia 50Hz (20ms)
 1d8:	8f e3       	ldi	r24, 0x3F	; 63
 1da:	9c e9       	ldi	r25, 0x9C	; 156
 1dc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1e0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1e4:	08 95       	ret

000001e6 <PMW1_SetDutyCycle>:
}

void PMW1_SetDutyCycle(uint16_t duty){
	OCR1A = duty; //valor del pulso (2000 = 1ms)
 1e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1ee:	08 95       	ret

000001f0 <PMW_LED_init>:
volatile uint8_t pmw_counter = 0;
volatile uint8_t pmw_valor = 128;

void PMW_LED_init(){
	//configuramos PD5 como salida para el LED
	DDRD |= (1 << DDD5);
 1f0:	8a b1       	in	r24, 0x0a	; 10
 1f2:	80 62       	ori	r24, 0x20	; 32
 1f4:	8a b9       	out	0x0a, r24	; 10
	
	//configuramos timer0 para interrupciones regulares
	TCCR0A = 0; //modo normal
 1f6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS00);		//no prescaler
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);			//habilitamos intnerrupcion por desbordamiento
 1fc:	ee e6       	ldi	r30, 0x6E	; 110
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	81 60       	ori	r24, 0x01	; 1
 204:	80 83       	st	Z, r24
	
	sei();
 206:	78 94       	sei
 208:	08 95       	ret

0000020a <PMW_LED_BRILLO>:
}

void PMW_LED_BRILLO(uint8_t brillo){
	pmw_valor = brillo;
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 20e:	08 95       	ret

00000210 <__vector_16>:
}

//rutina de interrupcion para el timer0
ISR(TIMER0_OVF_vect){
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
	pmw_counter++;
 21e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	
	if(pmw_counter >= 64){
 228:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 22c:	80 34       	cpi	r24, 0x40	; 64
 22e:	10 f0       	brcs	.+4      	; 0x234 <__vector_16+0x24>
	pmw_counter = 0;
 230:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
	
	if (pmw_counter < pmw_valor){
 234:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 238:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23c:	98 17       	cp	r25, r24
 23e:	20 f4       	brcc	.+8      	; 0x248 <__vector_16+0x38>
		PORTD |= (1 << PORTD5);
 240:	8b b1       	in	r24, 0x0b	; 11
 242:	80 62       	ori	r24, 0x20	; 32
 244:	8b b9       	out	0x0b, r24	; 11
 246:	03 c0       	rjmp	.+6      	; 0x24e <__vector_16+0x3e>
	}
	else {
		PORTD &= ~(1 << PORTD5);
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	8f 7d       	andi	r24, 0xDF	; 223
 24c:	8b b9       	out	0x0b, r24	; 11
	}
}
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <__subsf3>:
 25c:	50 58       	subi	r21, 0x80	; 128

0000025e <__addsf3>:
 25e:	bb 27       	eor	r27, r27
 260:	aa 27       	eor	r26, r26
 262:	0e 94 46 01 	call	0x28c	; 0x28c <__addsf3x>
 266:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_round>
 26a:	0e 94 10 02 	call	0x420	; 0x420 <__fp_pscA>
 26e:	38 f0       	brcs	.+14     	; 0x27e <__addsf3+0x20>
 270:	0e 94 17 02 	call	0x42e	; 0x42e <__fp_pscB>
 274:	20 f0       	brcs	.+8      	; 0x27e <__addsf3+0x20>
 276:	39 f4       	brne	.+14     	; 0x286 <__addsf3+0x28>
 278:	9f 3f       	cpi	r25, 0xFF	; 255
 27a:	19 f4       	brne	.+6      	; 0x282 <__addsf3+0x24>
 27c:	26 f4       	brtc	.+8      	; 0x286 <__addsf3+0x28>
 27e:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__fp_nan>
 282:	0e f4       	brtc	.+2      	; 0x286 <__addsf3+0x28>
 284:	e0 95       	com	r30
 286:	e7 fb       	bst	r30, 7
 288:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_inf>

0000028c <__addsf3x>:
 28c:	e9 2f       	mov	r30, r25
 28e:	0e 94 2f 02 	call	0x45e	; 0x45e <__fp_split3>
 292:	58 f3       	brcs	.-42     	; 0x26a <__addsf3+0xc>
 294:	ba 17       	cp	r27, r26
 296:	62 07       	cpc	r22, r18
 298:	73 07       	cpc	r23, r19
 29a:	84 07       	cpc	r24, r20
 29c:	95 07       	cpc	r25, r21
 29e:	20 f0       	brcs	.+8      	; 0x2a8 <__addsf3x+0x1c>
 2a0:	79 f4       	brne	.+30     	; 0x2c0 <__addsf3x+0x34>
 2a2:	a6 f5       	brtc	.+104    	; 0x30c <__addsf3x+0x80>
 2a4:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_zero>
 2a8:	0e f4       	brtc	.+2      	; 0x2ac <__addsf3x+0x20>
 2aa:	e0 95       	com	r30
 2ac:	0b 2e       	mov	r0, r27
 2ae:	ba 2f       	mov	r27, r26
 2b0:	a0 2d       	mov	r26, r0
 2b2:	0b 01       	movw	r0, r22
 2b4:	b9 01       	movw	r22, r18
 2b6:	90 01       	movw	r18, r0
 2b8:	0c 01       	movw	r0, r24
 2ba:	ca 01       	movw	r24, r20
 2bc:	a0 01       	movw	r20, r0
 2be:	11 24       	eor	r1, r1
 2c0:	ff 27       	eor	r31, r31
 2c2:	59 1b       	sub	r21, r25
 2c4:	99 f0       	breq	.+38     	; 0x2ec <__addsf3x+0x60>
 2c6:	59 3f       	cpi	r21, 0xF9	; 249
 2c8:	50 f4       	brcc	.+20     	; 0x2de <__addsf3x+0x52>
 2ca:	50 3e       	cpi	r21, 0xE0	; 224
 2cc:	68 f1       	brcs	.+90     	; 0x328 <__addsf3x+0x9c>
 2ce:	1a 16       	cp	r1, r26
 2d0:	f0 40       	sbci	r31, 0x00	; 0
 2d2:	a2 2f       	mov	r26, r18
 2d4:	23 2f       	mov	r18, r19
 2d6:	34 2f       	mov	r19, r20
 2d8:	44 27       	eor	r20, r20
 2da:	58 5f       	subi	r21, 0xF8	; 248
 2dc:	f3 cf       	rjmp	.-26     	; 0x2c4 <__addsf3x+0x38>
 2de:	46 95       	lsr	r20
 2e0:	37 95       	ror	r19
 2e2:	27 95       	ror	r18
 2e4:	a7 95       	ror	r26
 2e6:	f0 40       	sbci	r31, 0x00	; 0
 2e8:	53 95       	inc	r21
 2ea:	c9 f7       	brne	.-14     	; 0x2de <__addsf3x+0x52>
 2ec:	7e f4       	brtc	.+30     	; 0x30c <__addsf3x+0x80>
 2ee:	1f 16       	cp	r1, r31
 2f0:	ba 0b       	sbc	r27, r26
 2f2:	62 0b       	sbc	r22, r18
 2f4:	73 0b       	sbc	r23, r19
 2f6:	84 0b       	sbc	r24, r20
 2f8:	ba f0       	brmi	.+46     	; 0x328 <__addsf3x+0x9c>
 2fa:	91 50       	subi	r25, 0x01	; 1
 2fc:	a1 f0       	breq	.+40     	; 0x326 <__addsf3x+0x9a>
 2fe:	ff 0f       	add	r31, r31
 300:	bb 1f       	adc	r27, r27
 302:	66 1f       	adc	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	88 1f       	adc	r24, r24
 308:	c2 f7       	brpl	.-16     	; 0x2fa <__addsf3x+0x6e>
 30a:	0e c0       	rjmp	.+28     	; 0x328 <__addsf3x+0x9c>
 30c:	ba 0f       	add	r27, r26
 30e:	62 1f       	adc	r22, r18
 310:	73 1f       	adc	r23, r19
 312:	84 1f       	adc	r24, r20
 314:	48 f4       	brcc	.+18     	; 0x328 <__addsf3x+0x9c>
 316:	87 95       	ror	r24
 318:	77 95       	ror	r23
 31a:	67 95       	ror	r22
 31c:	b7 95       	ror	r27
 31e:	f7 95       	ror	r31
 320:	9e 3f       	cpi	r25, 0xFE	; 254
 322:	08 f0       	brcs	.+2      	; 0x326 <__addsf3x+0x9a>
 324:	b0 cf       	rjmp	.-160    	; 0x286 <__addsf3+0x28>
 326:	93 95       	inc	r25
 328:	88 0f       	add	r24, r24
 32a:	08 f0       	brcs	.+2      	; 0x32e <__addsf3x+0xa2>
 32c:	99 27       	eor	r25, r25
 32e:	ee 0f       	add	r30, r30
 330:	97 95       	ror	r25
 332:	87 95       	ror	r24
 334:	08 95       	ret

00000336 <__fixunssfsi>:
 336:	0e 94 37 02 	call	0x46e	; 0x46e <__fp_splitA>
 33a:	88 f0       	brcs	.+34     	; 0x35e <__fixunssfsi+0x28>
 33c:	9f 57       	subi	r25, 0x7F	; 127
 33e:	98 f0       	brcs	.+38     	; 0x366 <__fixunssfsi+0x30>
 340:	b9 2f       	mov	r27, r25
 342:	99 27       	eor	r25, r25
 344:	b7 51       	subi	r27, 0x17	; 23
 346:	b0 f0       	brcs	.+44     	; 0x374 <__fixunssfsi+0x3e>
 348:	e1 f0       	breq	.+56     	; 0x382 <__fixunssfsi+0x4c>
 34a:	66 0f       	add	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	88 1f       	adc	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	1a f0       	brmi	.+6      	; 0x35a <__fixunssfsi+0x24>
 354:	ba 95       	dec	r27
 356:	c9 f7       	brne	.-14     	; 0x34a <__fixunssfsi+0x14>
 358:	14 c0       	rjmp	.+40     	; 0x382 <__fixunssfsi+0x4c>
 35a:	b1 30       	cpi	r27, 0x01	; 1
 35c:	91 f0       	breq	.+36     	; 0x382 <__fixunssfsi+0x4c>
 35e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fp_zero>
 362:	b1 e0       	ldi	r27, 0x01	; 1
 364:	08 95       	ret
 366:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_zero>
 36a:	67 2f       	mov	r22, r23
 36c:	78 2f       	mov	r23, r24
 36e:	88 27       	eor	r24, r24
 370:	b8 5f       	subi	r27, 0xF8	; 248
 372:	39 f0       	breq	.+14     	; 0x382 <__fixunssfsi+0x4c>
 374:	b9 3f       	cpi	r27, 0xF9	; 249
 376:	cc f3       	brlt	.-14     	; 0x36a <__fixunssfsi+0x34>
 378:	86 95       	lsr	r24
 37a:	77 95       	ror	r23
 37c:	67 95       	ror	r22
 37e:	b3 95       	inc	r27
 380:	d9 f7       	brne	.-10     	; 0x378 <__fixunssfsi+0x42>
 382:	3e f4       	brtc	.+14     	; 0x392 <__fixunssfsi+0x5c>
 384:	90 95       	com	r25
 386:	80 95       	com	r24
 388:	70 95       	com	r23
 38a:	61 95       	neg	r22
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
 38e:	8f 4f       	sbci	r24, 0xFF	; 255
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	08 95       	ret

00000394 <__floatunsisf>:
 394:	e8 94       	clt
 396:	09 c0       	rjmp	.+18     	; 0x3aa <__floatsisf+0x12>

00000398 <__floatsisf>:
 398:	97 fb       	bst	r25, 7
 39a:	3e f4       	brtc	.+14     	; 0x3aa <__floatsisf+0x12>
 39c:	90 95       	com	r25
 39e:	80 95       	com	r24
 3a0:	70 95       	com	r23
 3a2:	61 95       	neg	r22
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	8f 4f       	sbci	r24, 0xFF	; 255
 3a8:	9f 4f       	sbci	r25, 0xFF	; 255
 3aa:	99 23       	and	r25, r25
 3ac:	a9 f0       	breq	.+42     	; 0x3d8 <__floatsisf+0x40>
 3ae:	f9 2f       	mov	r31, r25
 3b0:	96 e9       	ldi	r25, 0x96	; 150
 3b2:	bb 27       	eor	r27, r27
 3b4:	93 95       	inc	r25
 3b6:	f6 95       	lsr	r31
 3b8:	87 95       	ror	r24
 3ba:	77 95       	ror	r23
 3bc:	67 95       	ror	r22
 3be:	b7 95       	ror	r27
 3c0:	f1 11       	cpse	r31, r1
 3c2:	f8 cf       	rjmp	.-16     	; 0x3b4 <__floatsisf+0x1c>
 3c4:	fa f4       	brpl	.+62     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3c6:	bb 0f       	add	r27, r27
 3c8:	11 f4       	brne	.+4      	; 0x3ce <__floatsisf+0x36>
 3ca:	60 ff       	sbrs	r22, 0
 3cc:	1b c0       	rjmp	.+54     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ce:	6f 5f       	subi	r22, 0xFF	; 255
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
 3d2:	8f 4f       	sbci	r24, 0xFF	; 255
 3d4:	9f 4f       	sbci	r25, 0xFF	; 255
 3d6:	16 c0       	rjmp	.+44     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3d8:	88 23       	and	r24, r24
 3da:	11 f0       	breq	.+4      	; 0x3e0 <__floatsisf+0x48>
 3dc:	96 e9       	ldi	r25, 0x96	; 150
 3de:	11 c0       	rjmp	.+34     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3e0:	77 23       	and	r23, r23
 3e2:	21 f0       	breq	.+8      	; 0x3ec <__floatsisf+0x54>
 3e4:	9e e8       	ldi	r25, 0x8E	; 142
 3e6:	87 2f       	mov	r24, r23
 3e8:	76 2f       	mov	r23, r22
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <__floatsisf+0x5e>
 3ec:	66 23       	and	r22, r22
 3ee:	71 f0       	breq	.+28     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3f0:	96 e8       	ldi	r25, 0x86	; 134
 3f2:	86 2f       	mov	r24, r22
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	2a f0       	brmi	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fa:	9a 95       	dec	r25
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	da f7       	brpl	.-10     	; 0x3fa <__floatsisf+0x62>
 404:	88 0f       	add	r24, r24
 406:	96 95       	lsr	r25
 408:	87 95       	ror	r24
 40a:	97 f9       	bld	r25, 7
 40c:	08 95       	ret

0000040e <__fp_inf>:
 40e:	97 f9       	bld	r25, 7
 410:	9f 67       	ori	r25, 0x7F	; 127
 412:	80 e8       	ldi	r24, 0x80	; 128
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	08 95       	ret

0000041a <__fp_nan>:
 41a:	9f ef       	ldi	r25, 0xFF	; 255
 41c:	80 ec       	ldi	r24, 0xC0	; 192
 41e:	08 95       	ret

00000420 <__fp_pscA>:
 420:	00 24       	eor	r0, r0
 422:	0a 94       	dec	r0
 424:	16 16       	cp	r1, r22
 426:	17 06       	cpc	r1, r23
 428:	18 06       	cpc	r1, r24
 42a:	09 06       	cpc	r0, r25
 42c:	08 95       	ret

0000042e <__fp_pscB>:
 42e:	00 24       	eor	r0, r0
 430:	0a 94       	dec	r0
 432:	12 16       	cp	r1, r18
 434:	13 06       	cpc	r1, r19
 436:	14 06       	cpc	r1, r20
 438:	05 06       	cpc	r0, r21
 43a:	08 95       	ret

0000043c <__fp_round>:
 43c:	09 2e       	mov	r0, r25
 43e:	03 94       	inc	r0
 440:	00 0c       	add	r0, r0
 442:	11 f4       	brne	.+4      	; 0x448 <__fp_round+0xc>
 444:	88 23       	and	r24, r24
 446:	52 f0       	brmi	.+20     	; 0x45c <__fp_round+0x20>
 448:	bb 0f       	add	r27, r27
 44a:	40 f4       	brcc	.+16     	; 0x45c <__fp_round+0x20>
 44c:	bf 2b       	or	r27, r31
 44e:	11 f4       	brne	.+4      	; 0x454 <__fp_round+0x18>
 450:	60 ff       	sbrs	r22, 0
 452:	04 c0       	rjmp	.+8      	; 0x45c <__fp_round+0x20>
 454:	6f 5f       	subi	r22, 0xFF	; 255
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	8f 4f       	sbci	r24, 0xFF	; 255
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	08 95       	ret

0000045e <__fp_split3>:
 45e:	57 fd       	sbrc	r21, 7
 460:	90 58       	subi	r25, 0x80	; 128
 462:	44 0f       	add	r20, r20
 464:	55 1f       	adc	r21, r21
 466:	59 f0       	breq	.+22     	; 0x47e <__fp_splitA+0x10>
 468:	5f 3f       	cpi	r21, 0xFF	; 255
 46a:	71 f0       	breq	.+28     	; 0x488 <__fp_splitA+0x1a>
 46c:	47 95       	ror	r20

0000046e <__fp_splitA>:
 46e:	88 0f       	add	r24, r24
 470:	97 fb       	bst	r25, 7
 472:	99 1f       	adc	r25, r25
 474:	61 f0       	breq	.+24     	; 0x48e <__fp_splitA+0x20>
 476:	9f 3f       	cpi	r25, 0xFF	; 255
 478:	79 f0       	breq	.+30     	; 0x498 <__fp_splitA+0x2a>
 47a:	87 95       	ror	r24
 47c:	08 95       	ret
 47e:	12 16       	cp	r1, r18
 480:	13 06       	cpc	r1, r19
 482:	14 06       	cpc	r1, r20
 484:	55 1f       	adc	r21, r21
 486:	f2 cf       	rjmp	.-28     	; 0x46c <__fp_split3+0xe>
 488:	46 95       	lsr	r20
 48a:	f1 df       	rcall	.-30     	; 0x46e <__fp_splitA>
 48c:	08 c0       	rjmp	.+16     	; 0x49e <__fp_splitA+0x30>
 48e:	16 16       	cp	r1, r22
 490:	17 06       	cpc	r1, r23
 492:	18 06       	cpc	r1, r24
 494:	99 1f       	adc	r25, r25
 496:	f1 cf       	rjmp	.-30     	; 0x47a <__fp_splitA+0xc>
 498:	86 95       	lsr	r24
 49a:	71 05       	cpc	r23, r1
 49c:	61 05       	cpc	r22, r1
 49e:	08 94       	sec
 4a0:	08 95       	ret

000004a2 <__fp_zero>:
 4a2:	e8 94       	clt

000004a4 <__fp_szero>:
 4a4:	bb 27       	eor	r27, r27
 4a6:	66 27       	eor	r22, r22
 4a8:	77 27       	eor	r23, r23
 4aa:	cb 01       	movw	r24, r22
 4ac:	97 f9       	bld	r25, 7
 4ae:	08 95       	ret

000004b0 <__mulsf3>:
 4b0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__mulsf3x>
 4b4:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_round>
 4b8:	0e 94 10 02 	call	0x420	; 0x420 <__fp_pscA>
 4bc:	38 f0       	brcs	.+14     	; 0x4cc <__mulsf3+0x1c>
 4be:	0e 94 17 02 	call	0x42e	; 0x42e <__fp_pscB>
 4c2:	20 f0       	brcs	.+8      	; 0x4cc <__mulsf3+0x1c>
 4c4:	95 23       	and	r25, r21
 4c6:	11 f0       	breq	.+4      	; 0x4cc <__mulsf3+0x1c>
 4c8:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_inf>
 4cc:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__fp_nan>
 4d0:	11 24       	eor	r1, r1
 4d2:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__fp_szero>

000004d6 <__mulsf3x>:
 4d6:	0e 94 2f 02 	call	0x45e	; 0x45e <__fp_split3>
 4da:	70 f3       	brcs	.-36     	; 0x4b8 <__mulsf3+0x8>

000004dc <__mulsf3_pse>:
 4dc:	95 9f       	mul	r25, r21
 4de:	c1 f3       	breq	.-16     	; 0x4d0 <__mulsf3+0x20>
 4e0:	95 0f       	add	r25, r21
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	55 1f       	adc	r21, r21
 4e6:	62 9f       	mul	r22, r18
 4e8:	f0 01       	movw	r30, r0
 4ea:	72 9f       	mul	r23, r18
 4ec:	bb 27       	eor	r27, r27
 4ee:	f0 0d       	add	r31, r0
 4f0:	b1 1d       	adc	r27, r1
 4f2:	63 9f       	mul	r22, r19
 4f4:	aa 27       	eor	r26, r26
 4f6:	f0 0d       	add	r31, r0
 4f8:	b1 1d       	adc	r27, r1
 4fa:	aa 1f       	adc	r26, r26
 4fc:	64 9f       	mul	r22, r20
 4fe:	66 27       	eor	r22, r22
 500:	b0 0d       	add	r27, r0
 502:	a1 1d       	adc	r26, r1
 504:	66 1f       	adc	r22, r22
 506:	82 9f       	mul	r24, r18
 508:	22 27       	eor	r18, r18
 50a:	b0 0d       	add	r27, r0
 50c:	a1 1d       	adc	r26, r1
 50e:	62 1f       	adc	r22, r18
 510:	73 9f       	mul	r23, r19
 512:	b0 0d       	add	r27, r0
 514:	a1 1d       	adc	r26, r1
 516:	62 1f       	adc	r22, r18
 518:	83 9f       	mul	r24, r19
 51a:	a0 0d       	add	r26, r0
 51c:	61 1d       	adc	r22, r1
 51e:	22 1f       	adc	r18, r18
 520:	74 9f       	mul	r23, r20
 522:	33 27       	eor	r19, r19
 524:	a0 0d       	add	r26, r0
 526:	61 1d       	adc	r22, r1
 528:	23 1f       	adc	r18, r19
 52a:	84 9f       	mul	r24, r20
 52c:	60 0d       	add	r22, r0
 52e:	21 1d       	adc	r18, r1
 530:	82 2f       	mov	r24, r18
 532:	76 2f       	mov	r23, r22
 534:	6a 2f       	mov	r22, r26
 536:	11 24       	eor	r1, r1
 538:	9f 57       	subi	r25, 0x7F	; 127
 53a:	50 40       	sbci	r21, 0x00	; 0
 53c:	9a f0       	brmi	.+38     	; 0x564 <__mulsf3_pse+0x88>
 53e:	f1 f0       	breq	.+60     	; 0x57c <__mulsf3_pse+0xa0>
 540:	88 23       	and	r24, r24
 542:	4a f0       	brmi	.+18     	; 0x556 <__mulsf3_pse+0x7a>
 544:	ee 0f       	add	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	bb 1f       	adc	r27, r27
 54a:	66 1f       	adc	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	88 1f       	adc	r24, r24
 550:	91 50       	subi	r25, 0x01	; 1
 552:	50 40       	sbci	r21, 0x00	; 0
 554:	a9 f7       	brne	.-22     	; 0x540 <__mulsf3_pse+0x64>
 556:	9e 3f       	cpi	r25, 0xFE	; 254
 558:	51 05       	cpc	r21, r1
 55a:	80 f0       	brcs	.+32     	; 0x57c <__mulsf3_pse+0xa0>
 55c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_inf>
 560:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__fp_szero>
 564:	5f 3f       	cpi	r21, 0xFF	; 255
 566:	e4 f3       	brlt	.-8      	; 0x560 <__mulsf3_pse+0x84>
 568:	98 3e       	cpi	r25, 0xE8	; 232
 56a:	d4 f3       	brlt	.-12     	; 0x560 <__mulsf3_pse+0x84>
 56c:	86 95       	lsr	r24
 56e:	77 95       	ror	r23
 570:	67 95       	ror	r22
 572:	b7 95       	ror	r27
 574:	f7 95       	ror	r31
 576:	e7 95       	ror	r30
 578:	9f 5f       	subi	r25, 0xFF	; 255
 57a:	c1 f7       	brne	.-16     	; 0x56c <__mulsf3_pse+0x90>
 57c:	fe 2b       	or	r31, r30
 57e:	88 0f       	add	r24, r24
 580:	91 1d       	adc	r25, r1
 582:	96 95       	lsr	r25
 584:	87 95       	ror	r24
 586:	97 f9       	bld	r25, 7
 588:	08 95       	ret

0000058a <_exit>:
 58a:	f8 94       	cli

0000058c <__stop_program>:
 58c:	ff cf       	rjmp	.-2      	; 0x58c <__stop_program>
